// Generated by dts-bundle v0.6.1
// Dependencies for this module:
//   ../express
//   ../events
//   ../net
//   ../boom
//   ../winston

declare module 'facile' {
    import { Facile } from 'facile/core';
    let facile: Facile;
    export { facile, Facile };
    export * from 'facile/interfaces';
    export * from 'facile/types';
}

declare module 'facile/core' {
    import * as express from 'express';
    import { Core } from 'facile/core/core';
    import { IFacile, IConfig, IRoute, IConfigs, IRequestHandler, IRoutes, IInit, IMiddlewares, IComponents, IComponent, IErrorRequestHandler, IPolicy } from 'facile/interfaces';
    /**
        * Facile Core
        *
        * @export
        * @class Facile
        * @extends {Events}
        * @implements {IFacile}
        */
    export class Facile extends Core implements IFacile {
            /**
                * Singleton instance of Facile
                *
                * @static
                * @member {Facile} Facile.staticProperty
                * @memberOf Facile
                */
            static instance: Facile;
            /**
                * Facile constructor.
                * @constructor
                * @memberof Facile
                */
            constructor();
            /**
                * Configure
                    *
                * @method configure
                * @param {(string | IConfig)} [config]
                * @returns {Facile}
                * @memberOf Facile
                */
            configure(config?: string | IConfig): Facile;
            /**
                * Returns Initialization Methods
                *
                * @method init
                * @returns {IInit}
                * @memberOf Facile
                */
            init(): IInit;
            /**
                * Start Server.
                *
                * @method start
                * @param {Function} [fn]
                * @method
                * @memberof Facile
                */
            start(config?: string | IConfig | Function, fn?: Function): Facile;
            /**
                * Stops the server.
                *
                * @method stop
                * @param {string} [msg]
                * @param {number} [code]
                * @returns {void}
                *
                * @memberOf Facile
                */
            stop(msg?: string, code?: number): void;
            /**
                * registerConfig
                *
                * @method registerConfig
                * @param {string} name
                * @param {...any[]} extendWith
                *
                * @memberOf Facile
                */
            registerConfig(name: string, ...extendWith: any[]): Facile;
            /**
                * registerConfig
                *
                * @method registerConfig
                * @param {IConfigs} configs
                * @param {...any[]} extendWith
                *
                * @memberOf Facile
                */
            registerConfig(configs: IConfigs, ...extendWith: any[]): Facile;
            /**
                * registerMiddleware
                *
                * @method registerMiddleware
                * @param {IMiddlewares} middlewares
                * @returns {Facile}
                *
                * @memberOf Facile
                */
            registerMiddleware(middlewares: IMiddlewares): Facile;
            /**
                * registerMiddleware
                *
                * @method registerMiddleware
                * @param {string} name
                * @param {IRequestHandler} fn
                * @param {number} [order]
                * @returns {Facile}
                *
                * @memberOf Facile
                */
            registerMiddleware(name: string, fn: IRequestHandler, order?: number): Facile;
            /**
                * registerMiddleware
                *
                * @method registerMiddleware
                * @param {string} name
                * @param {IErrorRequestHandler} fn
                * @param {number} [order]
                * @returns {Facile}
                *
                * @memberOf Facile
                */
            registerMiddleware(name: string, fn: IErrorRequestHandler, order?: number): Facile;
            /**
                * registerRoute
                *
                * @method registerRoute
                * @param {IRoutes} routes
                * @returns {Facile}
                *
                * @memberOf Facile
                */
            registerRoute(routes: IRoutes): Facile;
            /**
                * registerRoute
                *
                * @method registerRoute
                * @param {Array<IRoute>} routes
                * @returns {Facile}
                *
                * @memberOf Facile
                */
            registerRoute(routes: Array<IRoute>): Facile;
            /**
                * registerPolicy
                *
                * @method registerPolicy
                * @param {IPolicies} policies
                * @returns {Facile}
                *
                * @memberOf Facile
                */
            registerPolicy(name: IPolicy): Facile;
            /**
                * registerPolicy
                *
                * @method registerPolicy
                * @param {string} name
                * @param {IPolicies} policy
                * @returns {Facile}
                *
                * @memberOf Facile
                */
            registerPolicy(name: string, policy: IPolicy): Facile;
            /**
                * registerPolicy
                *
                * @method registerPolicy
                * @param {string} name
                * @param {string} action
                * @param {boolean} policy
                * @returns {Facile}
                *
                * @memberOf Facile
                */
            registerPolicy(name: string, action: string, policy: boolean): Facile;
            /**
                * registerPolicy
                *
                * @method registerPolicy
                *
                * @param {string} name
                * @param {string} action
                * @param {string} policy
                * @returns {Facile}
                *
                * @memberOf Facile
                */
            registerPolicy(name: string, action: string, policy: string): Facile;
            /**
                * registerPolicy
                *
                * @method registerPolicy
                * @param {string} name
                * @param {string} action
                * @param {string[]} policy
                * @returns {Facile}
                *
                * @memberOf Facile
                */
            registerPolicy(name: string, action: string, policy: string[]): Facile;
            /**
                * registerPolicy
                *
                * @method registerPolicy
                * @param {string} name
                * @param {string} action
                * @param {IRequestHandler} policy
                * @returns {Facile}
                *
                * @memberOf Facile
                */
            registerPolicy(name: string, action: string, policy: IRequestHandler): Facile;
            /**
                * registerPolicy
                *
                * @method registerPolicy
                * @param {string} name
                * @param {string} action
                * @param {Array<IRequestHandler>} policy
                * @returns {Facile}
                *
                * @memberOf Facile
                */
            registerPolicy(name: string, action: string, policy: Array<IRequestHandler>): Facile;
            /**
                * registerComponent
                *
                * @method registerComponent
                * @param {IComponent} Component
                * @returns {Facile}
                *
                * @memberOf Facile
                */
            registerComponent(Component: IComponent): Facile;
            /**
                * registerComponent
                *
                * @method registerComponent
                *
                * @param {IComponents} components
                * @returns {Facile}
                *
                * @memberOf Facile
                */
            registerComponent(components: IComponents): Facile;
            /**
                * registerComponent
                *
                * @method registerComponent
                *
                * @param {string} name
                * @param {IComponent} Component
                * @returns {Facile}
                *
                * @memberOf Facile
                */
            registerComponent(name: string, Component: IComponent): Facile;
            /**
                * router
                *
                * @desc gets or creates a router.
                * @method router
                * @param {string} name
                * @returns {express.Router}
                *
                * @memberOf Facile
                */
            router(name: string, options?: any): express.Router;
            /**
                * Gets a Config by name.
                *
                * @method config
                * @param {string} name
                * @returns {IConfig}
                *
                * @memberOf Facile
                */
            config(name: string): IConfig;
            /**
                * Gets a Service
                *
                * @method service
                * @template T
                * @param {string} name
                * @returns {T}
                *
                * @memberOf Facile
                */
            service<T>(name: string): T;
            /**
                * Gets a Filter
                *
                * @method filter
                * @template T
                * @param {string} name
                * @returns {T}
                *
                * @memberOf Facile
                */
            filter<T>(name: string): T;
            /**
                * Gets a Model
                *
                * @method model
                * @template T
                * @param {string} name
                * @returns {T}
                *
                * @memberOf Facile
                */
            model<T>(name: string): T;
            /**
                * Gets a Controller.
                *
                * @method controller
                * @template T
                * @param {string} name
                * @returns {T}
                *
                * @memberOf Facile
                */
            controller<T>(name: string): T;
    }
}

declare module 'facile/interfaces' {
    import { EventEmitter } from 'events';
    import { Router, RequestHandler, NextFunction, ErrorRequestHandler, Request, Response, Express } from 'express';
    import { Socket, Server } from 'net';
    import { BoomError, Output } from 'boom';
    import { LoggerInstance } from 'winston';
    export interface IRequestHandler extends RequestHandler {
    }
    export interface INextFunction extends NextFunction {
    }
    export interface IErrorRequestHandler extends ErrorRequestHandler {
    }
    export interface IRequest extends Request {
    }
    export interface IResponse extends Response {
    }
    export interface IBoomError extends BoomError {
    }
    export interface IBoomOutput extends Output {
    }
    /**
        * IUtils
        *
        * @export
        * @interface IUtils
        */
    export interface IUtils {
            extend(...args: any[]): any;
            extendMap(key: any, val: any, obj?: any): void;
            initMap(Type: any, obj: any, instance?: any): void;
            maxIn(obj: any, key: string): number;
            hasIn(obj: any, key: any, val: any): boolean;
            parseRoute(url: string, handler: IRequestHandler | Array<IRequestHandler> | string | IRoute): IRoute;
            validateRoute(route: IRoute): IRoute;
            noop(): void;
            truncate(str: string, length: number, omission: string): string;
    }
    /**
        * IInit
        *
        * @export
        * @interface IInit
        */
    export interface IInit {
            run(): void;
            server(): IInit;
            services(): IInit;
            filters(): IInit;
            models(): IInit;
            controllers(): IInit;
            routes(): IInit;
            done(): IFacile;
    }
    /**
        * IListenersMap
        *
        * @export
        * @interface IListenersMap
        */
    export interface IListenersMap {
            [name: string]: {
                    before: boolean;
                    after: boolean;
            };
    }
    /**
        * ICore
        *
        * @export
        * @class ICore
        * @interface
        * @extends {EventEmitter}
        */
    export interface ICore extends EventEmitter {
            /**
                * Boom
                *
                * @member {IBoom} ICore#Boom
                * @memberOf ICore
                */
            Boom: IBoom;
            /**
                * express
                *
                * @member {*} express
                * @memberOf ICore
                */
            express: any;
            /**
                * app
                *
                * @member {Express} app
                * @memberOf ICore
                */
            app: Express;
            /**
                * server
                *
                * @member {Server} server
                * @memberOf ICore
                */
            server: Server;
            /**
                * log
                *
                * @member {LoggerInstance} log
                * @memberOf ICore
                */
            log: LoggerInstance;
            /**
                * _pkg
                *
                * @member {*} _pkg
                * @memberOf ICore
                */
            _pkg: any;
            /**
                * _apppkg
                *
                * @member {*} _apppkg
                * @memberOf ICore
                */
            _apppkg: any;
            /**
                * _config
                *
                * @member {IConfig} _config
                * @memberOf ICore
                */
            _config: IConfig;
            /**
                * _configs
                *
                * @member {IConfigs} _configs
                * @memberOf ICore
                */
            _configs: IConfigs;
            /**
                * _routers
                *
                * @member {IRouters} _routers
                * @memberOf ICore
                */
            _routers: IRouters;
            /**
                * _middlewares
                *
                * @member {IMiddlewaresMap} _middlewares
                * @memberOf ICore
                */
            _middlewares: IMiddlewares;
            /**
                * _services
                *
                * @member {*} _services
                * @memberOf ICore
                */
            _services: any;
            /**
                * _filters
                *
                * @member {*} _filters
                * @memberOf ICore
                */
            _filters: any;
            /**
                * _models
                *
                * @member {*} _models
                * @memberOf ICore
                */
            _models: any;
            /**
                * _controllers
                *
                * @member {*} _controllers
                * @memberOf ICore
                */
            _controllers: any;
            /**
                * _policies
                *
                * @member {*} _policies
                * @memberOf ICore
                */
            _policies: any;
            /**
                * _routes
                *
                * @member {Array<IRoute>} _routes
                * @memberOf ICore
                */
            _routes: Array<IRoute>;
            /**
                * _nextSocketId
                *
                * @member {number} _nextSocketId
                * @memberOf ICore
                */
            _nextSocketId: number;
            /**
                * _sockets
                *
                * @member {ISockets} _sockets
                * @memberOf ICore
                */
            _sockets: ISockets;
            before(name: string, event: ICallback): ICore;
            after(name: string, event: ICallback): ICore;
            hasBefore(name: string): boolean;
            hasAfter(name: string): boolean;
            execBefore(name: string, fn?: ICallbackResult): void;
            execAfter(name: string, fn?: ICallbackResult): void;
            execEvents(name: string, type: string, fn?: ICallbackResult): void;
    }
    /**
        * IFacile
        *
        * @export
        * @class IFacile
        * @interface IFacile
        * @extends {ICore}
        */
    export interface IFacile extends ICore {
            configure(config?: string | IConfig): IFacile;
            init(): IInit;
            start(config?: string | IConfig | Function, fn?: Function): IFacile;
            stop(msg?: string, code?: number): void;
            registerConfig(name: string, ...extend: any[]): IFacile;
            registerConfig(configs: IConfigs, ...extend: any[]): IFacile;
            registerConfig(name: string, config: IConfig): IFacile;
            registerMiddleware(middlewares: IMiddlewares): IFacile;
            registerMiddleware(name: string, fn: IRequestHandler, order?: number): IFacile;
            registerMiddleware(name: string, fn: IErrorRequestHandler, order?: number): IFacile;
            registerMiddleware(name: string | IMiddlewares, fn?: IRequestHandler | IErrorRequestHandler, order?: number): IFacile;
            registerRoute(routes: IRoutes): IFacile;
            registerRoute(routes: Array<IRoute>): IFacile;
            registerRoute(route: IRoute | IRoutes | IRoute[]): IFacile;
            registerPolicy(name: IPolicy): IFacile;
            registerPolicy(name: string, policy: IPolicy): IFacile;
            registerPolicy(name: string, action: string, policy: boolean): IFacile;
            registerPolicy(name: string, action: string, policy: string): IFacile;
            registerPolicy(name: string, action: string, policy: string[]): IFacile;
            registerPolicy(name: string, action: string, policy: IRequestHandler): IFacile;
            registerPolicy(name: string, action: string, policy: Array<IRequestHandler>): IFacile;
            registerPolicy(name: string | IPolicy, action?: string | boolean | string[] | IRequestHandler | Array<IRequestHandler> | IPolicy, policy?: string | boolean | string[] | IRequestHandler | Array<IRequestHandler>): IFacile;
            registerComponent(Component: IComponent): IFacile;
            registerComponent(components: IComponents): IFacile;
            registerComponent(name: string, Component: IComponent): IFacile;
            registerComponent(name: string | IComponent | IComponents, Component?: IComponent): IFacile;
            router(name: string, options?: any): Router;
            config(name: string): IConfig;
            filter<T>(name: string): T;
            service<T>(name: string): T;
            model<T>(name: string): T;
            controller<T>(name: string): T;
    }
    /**
        * SSL Certificate Interface.
        *
        * @export
        * @interface ICertificate
        */
    export interface ICertificate {
            key: string;
            cert: string;
    }
    /**
        * Node style callback.
        * @todo should probably support promise also.
        *
        * @export
        * @interface ICallback
        */
    export interface ICallbackResult {
            (err?: string | Error, data?: any): void;
    }
    export interface ICallback {
            (done: ICallbackResult): void;
    }
    /**
        * Name and renderer for views.
        * @todo create custon interface
        * for renderer. consolidate should
        * but does not export the interface
        * in typings.
        *
        * @export
        * @interface IViewEngine
        */
    export interface IViewEngine {
            name: string;
            renderer: string | Function;
    }
    /**
        * Express View Settings
        *
        * @export
        * @interface IExpressViews
        */
    export interface IViewConfig {
            layout?: string;
            engine?: IViewEngine;
            'view engine'?: string;
            views?: string | string[] | boolean;
    }
    export interface IDatabase {
            'module': any;
            connection: any;
    }
    /**
        * IRoutesTemplate
        *
        * @export
        * @interface IRoutesTemplate
        */
    export interface IRoutesTemplate {
            find?: string;
            findOne?: string;
            create?: string;
            update?: string;
            destroy?: string;
    }
    /**
        * IRoutesConfig
        *
        * @export
        * @interface IRoutesConfig
        */
    export interface IRoutesConfig {
            controller?: string;
            /**
                * securityFilter
                *
                * @desc the default policy filter.
                * @member {(string | IRequestHandler)} securityFilter
                * @memberOf IConfig
                */
            securityFilter?: string | IRequestHandler;
            rest?: IRoutesTemplate;
            crud?: IRoutesTemplate;
    }
    /**
        * Server Configuration.
        *
        * @export
        * @interface IConfig
        */
    export interface IConfig {
            /**
                * auto
                *
                * @desc enables auto init/configure.
                * @member {boolean} auto
                * @memberOf IConfig
                */
            auto?: boolean;
            /**
                * cwd
                *
                * @desc the current working directory.
                * @member {string} cwd
                * @memberOf IConfig
                */
            cwd?: string;
            /**
                * pkg
                *
                * @desc the app's package.json.
                * @member {*} pkg
                * @memberOf IConfig
                */
            pkg?: any;
            /**
                * host
                *
                * @desc the server's host address.
                * @member {string} host
                * @memberOf IConfig
                */
            host?: string;
            /**
                * port
                *
                * @desc the server's port.
                * @member {number}
                * @memberOf IConfig
                */
            port?: number;
            /**
                * certificate
                *
                * @desc the ssl certificate.
                * @member {(ICertificate | boolean)} certificate
                * @memberOf IConfig
                */
            certificate?: ICertificate | true;
            /**
                * maxConnections
                *
                * @desc the maximum simultaneous socket connections.
                * @member {number} maxConnections
                * @memberOf IConfig
                */
            maxConnections?: number;
            /**
                * env
                *
                * @desc the current working environment.
                * @member {string} env
                * @memberOf IConfig
                */
            env?: string;
            /**
                * logger
                *
                * @desc the default app's logger.
                * @member {LoggerInstance} logger
                * @memberOf IConfig
                */
            logger?: LoggerInstance;
            /**
                * logLevel
                *
                * @desc the log level to set the logger to.
                * @member {('error' | 'warn' | 'info' | 'debug')} logLevel
                * @memberOf IConfig
                */
            logLevel?: 'error' | 'warn' | 'info' | 'debug';
            /**
                * views
                *
                * @desc the server views configuration.
                * @member {IViewConfig} views
                * @memberOf IConfig
                */
            views?: IViewConfig;
            /**
                * database
                *
                * @desc the database configuration.
                * @member {IDatabase} database
                * @memberOf IConfig
                */
            database?: IDatabase;
            /**
                * routes
                *
                * @desc the config for generating routes.
                * @member {IRoutesConfig} routes
                * @memberOf IConfig
                */
            routes?: IRoutesConfig;
    }
    /**
        * Map of Configs.
        *
        * @export
        * @interface IConfigs
        */
    export interface IConfigs {
            [name: string]: IConfig;
    }
    /**
        * Interface for configuration flags.
        *
        * @export
        * @interface IFlags
        */
    export interface IFlags {
            [name: string]: any;
    }
    /**
        * Map containing socket connections.
        *
        * @export
        * @interface ISockets
        */
    export interface ISockets {
            [id: number]: Socket;
    }
    /**
        * Map of app middleware.
        *
        * @export
        * @interface IMiddleware
        */
    export interface IMiddleware {
            fn: IRequestHandler | IErrorRequestHandler;
            order?: number;
    }
    /**
        * IMiddlewares
        *
        * @export
        * @interface IMiddlewares
        */
    export interface IMiddlewares {
            [name: string]: IMiddleware;
    }
    /**
        * Boom wrap event signature interface.
        *
        * @export
        * @interface IBoomWrap
        */
    export interface IBoomWrap {
            (error: Error, statusCode?: number, message?: string): BoomError;
    }
    /**
        * Boom create signature interface.
        *
        * @export
        * @interface IBoomCreate
        */
    export interface IBoomCreate {
            (statusCode: number, message?: string, data?: any): BoomError;
    }
    /**
        * Boom event signature interface.
        *
        * @export
        * @interface IBoomEvent
        */
    export interface IBoomEvent {
            (message?: string, data?: any): BoomError;
    }
    /**
        * Interface used to extend framework with
        * standard Boom error events.
        *
        * @export
        * @interface IBoom
        */
    export interface IBoom {
            wrap: IBoomWrap;
            create: IBoomCreate;
            badRequest: IBoomEvent;
            unauthorized: IBoomEvent;
            forbidden: IBoomEvent;
            notFound: IBoomEvent;
            notImplemented: IBoomEvent;
            badGateway: IBoomEvent;
    }
    /**
        * Router Interface Map.
        *
        * @export
        * @interface IRouters
        */
    export interface IRouters {
            [name: string]: Router;
    }
    /**
        * Route Interface.
        *
        * @export
        * @interface IRoute
        */
    export interface IRoute {
            method?: string | Array<string>;
            url?: string | Array<string>;
            handler?: IRequestHandler | string;
            filters?: IRequestHandler | Array<IRequestHandler>;
            view?: string;
            redirect?: string;
            router?: string;
            valid?: boolean;
    }
    /**
        * Interface for Routes by Map.
        *
        * @export
        * @interface IRoutesMap
        */
    export interface IRoutes {
            [url: string]: IRequestHandler | Array<IRequestHandler> | string | IRoute;
    }
    /**
        * IPolicy
        *
        * @export
        * @interface IPolicy
        */
    export interface IPolicy {
            [name: string]: boolean | string | string[] | IRequestHandler | Array<IRequestHandler> | IPolicies;
    }
    /**
        * IPolicies
        *
        * @export
        * @interface IPolicies
        */
    export interface IPolicies {
            [name: string]: IPolicy;
    }
    /**
        * IComponent
        *
        * @desc base interfaces for components.
        * @export
        * @interface IComponent
        */
    export interface IComponent {
    }
    /**
        * IComponentsMap
        *
        * @desc key value map of IComponents.
        * @export
        * @interface IComponentsMap
        */
    export interface IComponents {
            [name: string]: IComponent;
    }
    /**
        * IFilter
        *
        * @desc interfaces for filters.
        * @export
        * @interface IFilter
        * @extends {IComponent}
        */
    export interface IFilter extends IComponent {
    }
    /**
        * IModel
        *
        * @desc interfaces for models.
        * @export
        * @interface IModel
        * @extends {IComponent}
        */
    export interface IModel extends IComponent {
    }
    /**
        * IController
        *
        * @desc interfaces for controllers.
        * @export
        * @interface IController
        * @extends {IComponent}
        */
    export interface IController extends IComponent {
    }
    /**
        * IService
        *
        * @desc interface for services.
        * @export
        * @interface IService
        * @extends {IComponent}
        */
    export interface IService extends IComponent {
    }
}

declare module 'facile/types' {
    export * from 'facile/types/service';
    export * from 'facile/types/filter';
    export * from 'facile/types/model';
    export * from 'facile/types/controller';
}

declare module 'facile/core/core' {
    import { LoggerInstance } from 'winston';
    import { Express } from 'express';
    import { Server } from 'net';
    import { EventEmitter } from 'events';
    import { ICore, ICallbackResult, ICallback, IConfig, IConfigs, IListenersMap, IBoom, IRouters, ISockets, IRoute, IMiddlewares } from 'facile/interfaces';
    /**
        * Facile Core
        *
        * @export
        * @class Core
        * @extends {EventEmitter}
        * @implements {IEvents}
        */
    export class Core extends EventEmitter implements ICore {
            /**
                * Boom
                *
                * @member {IBoom} Boom
                * @memberOf Core
                */
            Boom: IBoom;
            /**
                * express
                *
                * @member {*} express
                * @memberOf Core
                */
            express: any;
            /**
                * app
                *
                * @member {Express} app
                * @memberOf Core
                */
            app: Express;
            /**
                * server
                *
                * @member {Server} server
                * @memberOf Core
                */
            server: Server;
            /**
                * log
                *
                * @member {LoggerInstance} log
                * @memberOf Core
                */
            log: LoggerInstance;
            /**
                * _pkg
                *
                * @member {*} _pkg
                * @memberOf Core
                */
            _pkg: any;
            /**
                * _apppkg
                *
                * @member {*} _apppkg
                * @memberOf Core
                */
            _apppkg: any;
            /**
                * _config
                *
                * @member {IConfig} _config
                * @memberOf Core
                */
            _config: IConfig;
            /**
                * _configs
                *
                * @member {IConfigs} _configs
                * @memberOf Core
                */
            _configs: IConfigs;
            /**
                * _routers
                *
                * @member {IRouters} _routers
                * @memberOf Core
                */
            _routers: IRouters;
            /**
                * _middlewares
                *
                * @member {IMiddlewaresMap} _middlewares
                * @memberOf Core
                */
            _middlewares: IMiddlewares;
            /**
                * _services
                *
                * @member {*} _services
                * @memberOf Core
                */
            _services: any;
            /**
                * _filters
                *
                * @member {*} _filters
                * @memberOf Core
                */
            _filters: any;
            /**
                * _models
                *
                * @member {*} _models
                * @memberOf Core
                */
            _models: any;
            /**
                * _controllers
                *
                * @member {*} _controllers
                * @memberOf Core
                */
            _controllers: any;
            /**
                * _policies
                *
                * @member {*} _policies
                * @memberOf Core
                */
            _policies: any;
            /**
                * _routes
                *
                * @member {Array<IRoute>} _routes
                * @memberOf Core
                */
            _routes: Array<IRoute>;
            /**
                * _nextSocketId
                *
                * @member {number} _nextSocketId
                * @memberOf Core
                */
            _nextSocketId: number;
            /**
                * _sockets
                *
                * @member {ISockets} _sockets
                * @memberOf Core
                */
            _sockets: ISockets;
            /**
                * _listeners
                *
                * @member _listeners
                * @protected
                * @member {IListenersMap}
                * @memberOf Core
                */
            protected _listeners: IListenersMap;
            /**
                * _beforeEvents
                *
                * @member _beforeEvents
                * @protected
                * @member {*}
                * @memberOf Core
                */
            protected _beforeEvents: any;
            /**
                * _afterEvents
                *
                * @member _afterEvents
                * @protected
                * @member {*}
                * @memberOf Core
                */
            protected _afterEvents: any;
            /**
                * _configured
                *
                * @member _configured
                * @protected
                * @member {boolean}
                * @memberOf Core
                */
            protected _configured: boolean;
            /**
                * _initialized
                *
                * @member _initialized
                * @protected
                * @member {boolean}
                * @memberOf Core
                */
            protected _initialized: boolean;
            /**
                * _started
                *
                * @member _started
                * @protected
                * @member {boolean}
                * @memberOf Core
                */
            protected _started: boolean;
            /**
                * _autoInit
                *
                * @member _autoInit
                * @protected
                * @member {boolean}
                * @memberOf Core
                */
            protected _autoInit: boolean;
            /**
                * Creates an instance of Core.
                *
                * @constructor
                * @memberOf Core
                */
            constructor();
            /**
                * Adds before event listener
                * to known Facile event.
                *
                * @method before
                * @param {string} name the name of the Facile event.
                * @param {Function} event the event to be called.
                *
                * @memberOf Core
                */
            before(name: string, event: ICallback): Core;
            /**
                * Adds after event listener
                * to known Facile event.
                *
                * @method after
                * @param {string} name the name of the Facile event.
                * @param {Function} event the event to be called.
                *
                * @memberOf Core
                */
            after(name: string, event: ICallback): Core;
            /**
                * Checks if before listeners exist for event.
                *
                * @method hasBefore
                * @param {string} name
                * @returns {boolean}
                *
                * @memberOf Core
                */
            hasBefore(name: string): boolean;
            /**
                * Checks if after listeners exist for event.
                *
                * @method hasAfter
                * @param {string} name
                * @returns {boolean}
                *
                * @memberOf Core
                */
            hasAfter(name: string): boolean;
            /**
                * Executes before event listeners.
                *
                * @method execBefore
                * @param {string} name
                * @param {ICallbackResult} [fn]
                *
                * @memberOf Core
                */
            execBefore(name: string, fn?: ICallbackResult): void;
            /**
                * Executes after event listeners.
                *
                * @method execAfter
                * @param {string} name
                * @param {ICallbackResult} [fn]
                *
                * @memberOf Core
                */
            execAfter(name: string, fn?: ICallbackResult): void;
            /**
                * Executes lifecyle events for
                * a known Facile event.
                *
                * @example
                *
                * In the example below each "before"
                * event funciton is called in series
                * until completed. Calling the callback
                * is required in each lifecycle event.
                *
                * facile.before('init:server', (done) => {
                *
                * 		// do something before server init.
                * 		// call done when finished.
                * 		done();
                *
                * 		// If there's an error pass to
                * 		// done method and it will be logged.
                * 		// done(err);
                *
                * 		// To exit simply return the callback.
                * 		// return done();
                *
                * });
                *
                * @method execEvents
                * @param {string} name
                * @param {string} type
                * @param {ICallback} [fn]
                *
                * @memberOf Core
                */
            execEvents(name: string, type: any, fn?: ICallbackResult): void;
    }
}

declare module 'facile/types/service' {
    import { IService, IFacile } from 'facile/interfaces';
    import { LoggerInstance } from 'winston';
    /**
        * Base Service Class
        *
        * @export
        * @class Service
        */
    export class Service implements IService {
            static type: string;
            protected facile: IFacile;
            /**
                * Creates an instance of Service.
                *
                * @param {IFacile} facile
                * @constructor
                * @memberOf Service
                */
            constructor(facile: IFacile);
            /**
                * log
                *
                * @desc exposes Facile.log to class.
                * @readonly
                * @method {LoggerInstance} log
                * @memberOf Service
                */
            readonly log: LoggerInstance;
    }
}

declare module 'facile/types/filter' {
    import { IFilter, IFacile } from 'facile/interfaces';
    import { LoggerInstance } from 'winston';
    /**
        * Base Filter Class
        *
        * @export
        * @class Filter
        * @implements {IFilter}
        */
    export class Filter implements IFilter {
            static type: string;
            protected facile: IFacile;
            /**
                * Creates an instance of Filter.
                *
                * @param {IFacile} facile
                * @contructor
                * @memberOf Filter
                */
            constructor(facile: IFacile);
            /**
                * log
                *
                * @desc exposes Facile.log to class.
                * @readonly
                * @method {LoggerInstance} log
                * @memberOf Service
                */
            readonly log: LoggerInstance;
    }
}

declare module 'facile/types/model' {
    import { IModel, IFacile } from 'facile/interfaces';
    import { LoggerInstance } from 'winston';
    /**
        * Base Model Class
        *
        * @export
        * @class Model
        */
    export class Model implements IModel {
            static type: string;
            protected facile: IFacile;
            /**
                * Creates an instance of Model.
                *
                * @param {IFacile} facile
                * @constructor
                * @memberOf Model
                */
            constructor(facile: IFacile);
            /**
                * log
                *
                * @desc exposes Facile.log to class.
                * @readonly
                * @method {LoggerInstance} log
                * @memberOf Service
                */
            readonly log: LoggerInstance;
    }
}

declare module 'facile/types/controller' {
    import { IController, IFacile } from 'facile/interfaces';
    import { LoggerInstance } from 'winston';
    /**
        * Base Controller Class
        *
        * @export
        * @class Controller
        */
    export class Controller implements IController {
            static type: string;
            protected facile: IFacile;
            /**
                * Creates an instance of Controller.
                *
                * @param {IFacile} facile
                * @constructor
                * @memberOf Controller
                */
            constructor(facile: IFacile);
            /**
                * log
                *
                * @desc exposes Facile.log to class.
                * @readonly
                * @method {LoggerInstance} log
                * @memberOf Service
                */
            readonly log: LoggerInstance;
    }
}

