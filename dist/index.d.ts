// Generated by dts-bundle v0.6.1
// Dependencies for this module:
//   ../events
//   ../express
//   ../winston
//   ../net
//   ../boom

declare module 'facile' {
    import { Facile } from 'facile/core';
    export let facile: Facile;
    export * from 'facile/interfaces';
    export * from 'facile/types';
}

declare module 'facile/core' {
    import * as events from 'events';
    import * as express from 'express';
    import { LoggerInstance } from 'winston';
    import { Server } from 'net';
    import { IFacile, IConfig, IRouters, IRoute, IBoom, ICallback, IFilter, IMiddlewares, ISockets, IModels, IControllers, IModel, IController, IUtils, IFilters, IConfigs, IRequestHandler, IRoutesMap, IService, IServices } from 'facile/interfaces';
    /**
        * Facile Core
        *
        * @export
        * @class Facile
        * @extends {events.EventEmitter}
        * @implements {IFacile}
        */
    export class Facile extends events.EventEmitter implements IFacile {
            static instance: Facile;
            Boom: IBoom;
            utils: IUtils;
            app: express.Express;
            server: Server;
            logger: LoggerInstance;
            _pkg: any;
            _config: IConfig;
            _configs: IConfigs;
            _routers: IRouters;
            _routes: Array<IRoute>;
            _nextSocketId: number;
            _sockets: ISockets;
            _services: IServices;
            _middlewares: IMiddlewares;
            _filters: IFilters;
            _models: IModels;
            _controllers: IControllers;
            /**
                * Creates an instance of RecRent.
                *
                * @constructor
                * @memberof Facile
                */
            constructor();
            /**
                * Configures Facile
                * optionally provide boolean to
                * auto load and start.
                *
                * @param {(IConfig | boolean)} [config]
                * @param {(boolean | ICallback)} [autoStart]
                * @param {ICallback} [fn]
                * @returns {(Facile | void)}
                *
                * @memberOf Facile
                */
            configure(config?: IConfig | boolean, autoStart?: boolean | ICallback, fn?: ICallback): Facile | void;
            /**
                * Load Controllers, Models & Services.
                *
                * @param {boolean} [autoStart]
                * @param {ICallback} [fn]
                * @returns {(Facile | void)}
                *
                * @memberOf Facile
                */
            load(autoStart?: boolean, fn?: ICallback): Facile | void;
            /**
                * Start Server.
                *
                * @param {Function} [fn]
                * @method
                * @memberof Facile
                */
            start(fn?: Function): void;
            /**
                * Stops the server.
                *
                * @param {string} [msg]
                * @param {number} [code]
                * @returns {void}
                *
                * @memberOf Facile
                */
            stop(msg?: string, code?: number): void;
            /**
                * Adds a Configuration.
                *
                * @param {string} name
                * @param {IConfig} config
                * @returns {Facile}
                *
                * @memberOf Facile
                */
            addConfig(name: string | IConfigs, config: IConfig): Facile;
            /**
                * Adds/Creates a Router.
                *
                * @param {string} name
                * @param {express.Router} [router]
                * @returns {express.Router}
                *
                * @memberOf Facile
                */
            addRouter(name: string | IRouters, router?: express.Router): express.Router;
            /**
                * Registers Middleware or Middlewares to Express.
                *
                * @param {string} name
                * @param {IRequestHandler} fn
                * @param {number} [order]
                * @returns {Facile}
                *
                * @memberOf Facile
                */
            addMiddleware(name: string | IMiddlewares, fn: IRequestHandler, order?: number): Facile;
            /**
                * Registers a Service.
                *
                * @param {(IService | Array<IService>)} Service
                * @returns {Facile}
                *
                * @memberOf Facile
                */
            addService(Service: IService | Array<IService>): Facile;
            /**
                * Registers Filter or Map of Filters.
                *
                * @param {(string | IFilters)} name
                * @param {IRequestHandler} fn
                * @returns {Facile}
                *
                * @memberOf Facile
                */
            addFilter(Filter: IFilter | Array<IFilter>): Facile;
            /**
                * Registers a Model.
                *
                * @param {(IModel | Array<IModel>)} Model
                * @returns {Facile}
                *
                * @memberOf Facile
                */
            addModel(Model: IModel | Array<IModel>): Facile;
            /**
                * Registers a Controller.
                *
                * @param {(IController | Array<IController>)} Controller
                * @returns {Facile}
                *
                * @memberOf Facile
                */
            addController(Controller: IController | Array<IController>): Facile;
            /**
                * Adds a route to the map.
                *
                * @param {(string | IRoute)} method
                * @param {string} url
                * @param {(express.Handler | Array<express.Handler>)} handlers
                * @param {string} [router]
                * @returns {RecRent}
                *
                * @memberOf Facile
                */
            addRoute(method: string | IRoute | Array<string> | IRoutesMap, url?: string, handlers?: IRequestHandler | Array<IRequestHandler>, router?: string): Facile;
            /**
                * Gets a Router by name.
                *
                * @param {string} name
                * @returns {express.Router}
                *
                * @memberOf Facile
                */
            router(name: string): express.Router;
            /**
                * Gets a Config by name.
                *
                * @param {string} name
                * @returns {IConfig}
                *
                * @memberOf Facile
                */
            config(name: string): IConfig;
            /**
                * Gets a Service by name.
                *
                * @param {string} name
                * @returns {IService}
                *
                * @memberOf Facile
                */
            service(name: string): IService;
            /**
                * Gets a Filter by name.
                *
                * @param {string} name
                * @returns {IFilter}
                *
                * @memberOf Facile
                */
            filter(name: string): IFilter;
            /**
                * Gets a Model by name.
                *
                * @param {string} name
                * @returns {IModel}
                *
                * @memberOf Facile
                */
            model(name: string): IModel;
            /**
                * Gets a Controller by name.
                *
                * @param {string} name
                * @returns {IController}
                *
                * @memberOf Facile
                */
            controller(name: string): IController;
    }
}

declare module 'facile/interfaces' {
    import { Router, RequestHandler, NextFunction, ErrorRequestHandler, Request, Response, Express } from 'express';
    import { Socket, Server } from 'net';
    import { BoomError, Output } from 'boom';
    import { LoggerInstance } from 'winston';
    export interface IRequestHandler extends RequestHandler {
    }
    export interface INextFunction extends NextFunction {
    }
    export interface IErrorRequestHandler extends ErrorRequestHandler {
    }
    export interface IRequest extends Request {
    }
    export interface IResponse extends Response {
    }
    export interface IBoomError extends BoomError {
    }
    export interface IBoomOutput extends Output {
    }
    export interface IUtils {
            extend(...args: any[]): any;
            extendMap(key: any, val: any, obj?: any): void;
            initMap(Type: any, obj: any, instance?: any): void;
            maxIn(obj: any, key: string): number;
            hasIn(obj: any, key: any, val: any): boolean;
            noop(): void;
    }
    export interface IFacile {
            _pkg: any;
            Boom: IBoom;
            logger: LoggerInstance;
            app: Express;
            server: Server;
            _config: IConfig;
            _routers: IRouters;
            _routes: Array<IRoute>;
            _nextSocketId: number;
            _sockets: ISockets;
            _middlewares: IMiddlewares;
            _filters: IFilters;
            _models: IModels;
            _controllers: IControllers;
            configure(config?: IConfig | boolean, autoStart?: boolean | ICallback, fn?: ICallback): IFacile | void;
            load(autoStart?: boolean, fn?: ICallback): IFacile | void;
            start(fn?: ICallback): void;
            stop(msg?: string, code?: number): void;
            addConfig(name: string, config: IConfig): IFacile;
            addRouter(name: string, router?: Router): Router;
            addMiddleware(name: string, fn: Function, order?: number): IFacile;
            addService(Service: IService | Array<IService>): IFacile;
            addFilter(Filter: IFilter | Array<IFilter>): IFacile;
            addModel(Model: IModel | Array<IModel>): IFacile;
            addController(Controller: IController | Array<IController>): IFacile;
            addService(Service: IService | Array<IService>, instance?: boolean): IFacile;
            addRoute(method: string | IRoute | Array<string>, url?: string, handlers?: IRequestHandler | Array<IRequestHandler>, router?: string): IFacile;
            config(name: string): IConfig;
            filter(name: string): IFilter;
            service(name: string): IService;
            model(name: string): IModel;
            controller(name: string): IController;
    }
    /**
        * SSL Certificate Interface.
        *
        * @export
        * @interface ICertificate
        */
    export interface ICertificate {
            key: string;
            cert: string;
    }
    /**
        * Node style callback.
        * @todo should probably support promise also.
        *
        * @export
        * @interface ICallback
        */
    export interface ICallback {
            (err?: string | Error, data?: any): void;
    }
    /**
        * Express View Settings
        *
        * @export
        * @interface IExpressViews
        */
    export interface IExpressViews {
            engine: string;
            'view engine': string;
            views: string | string[];
    }
    /**
        * Server Configuration.
        *
        * @export
        * @interface IConfig
        */
    export interface IConfig {
            cwd?: string;
            pkg?: any;
            host?: string;
            port?: number;
            certificate?: ICertificate | true;
            maxConnections?: number;
            env?: string;
            logger?: LoggerInstance;
            logLevel?: 'error' | 'warn' | 'info' | 'debug';
            views?: IExpressViews;
            database?: any;
    }
    /**
        * Map of Configs.
        *
        * @export
        * @interface IConfigs
        */
    export interface IConfigs {
            [name: string]: IConfig;
    }
    /**
        * Interface for configuration flags.
        *
        * @export
        * @interface IFlags
        */
    export interface IFlags {
            [name: string]: any;
    }
    /**
        * Map containing socket connections.
        *
        * @export
        * @interface ISockets
        */
    export interface ISockets {
            [id: number]: Socket;
    }
    /**
        * Map of app middleware.
        *
        * @export
        * @interface IMiddleware
        */
    export interface IMiddleware {
            fn: IRequestHandler;
            order?: number;
    }
    /**
        * Map of middleware.
        *
        * @export
        * @interface IMiddlewares
        */
    export interface IMiddlewares {
            [name: string]: IMiddleware;
    }
    /**
        * Boom wrap event signature interface.
        *
        * @export
        * @interface IBoomWrap
        */
    export interface IBoomWrap {
            (error: Error, statusCode?: number, message?: string): BoomError;
    }
    /**
        * Boom create signature interface.
        *
        * @export
        * @interface IBoomCreate
        */
    export interface IBoomCreate {
            (statusCode: number, message?: string, data?: any): BoomError;
    }
    /**
        * Boom event signature interface.
        *
        * @export
        * @interface IBoomEvent
        */
    export interface IBoomEvent {
            (message?: string, data?: any): BoomError;
    }
    /**
        * Interface used to extend framework with
        * standard Boom error events.
        *
        * @export
        * @interface IBoom
        */
    export interface IBoom {
            wrap: IBoomWrap;
            create: IBoomCreate;
            badRequest: IBoomEvent;
            unauthorized: IBoomEvent;
            forbidden: IBoomEvent;
            notFound: IBoomEvent;
            notImplemented: IBoomEvent;
            badGateway: IBoomEvent;
    }
    /**
        * Router Interface Map.
        *
        * @export
        * @interface IRouters
        */
    export interface IRouters {
            [name: string]: Router;
    }
    /**
        * Route Interface.
        *
        * @export
        * @interface IRoute
        */
    export interface IRoute {
            router?: string;
            method?: string | Array<string>;
            url: string | Array<string>;
            handlers: IRequestHandler | Array<IRequestHandler>;
    }
    /**
        * Interface for Routes by Map.
        *
        * @export
        * @interface IRoutesMap
        */
    export interface IRoutesMap {
            [url: string]: IRequestHandler | Array<IRequestHandler>;
    }
    /**
        * Filter Interface.
        *
        * @export
        * @interface IFilter
        */
    export interface IFilter {
    }
    /**
        * Map of Filters.
        *
        * @export
        * @interface IFilters
        */
    export interface IFilters {
            [name: string]: IFilter;
    }
    /**
        * Service Interface
        *
        * @export
        * @interface IService
        */
    export interface IService {
    }
    /**
        * Map of Services
        *
        * @export
        * @interface IServices
        */
    export interface IServices {
            [name: string]: IService;
    }
    /**
        * Model interface.
        *
        * @export
        * @interface IModel
        */
    export interface IModel {
    }
    /**
        * Map of IModels.
        *
        * @export
        * @interface IModels
        */
    export interface IModels {
            [name: string]: IModel;
    }
    /**
        * Controller Interface.
        *
        * @export
        * @interface IController
        */
    export interface IController {
    }
    /**
        * Map of Controllers.
        *
        * @export
        * @interface IControllers
        */
    export interface IControllers {
            [name: string]: IController;
    }
}

declare module 'facile/types' {
    export * from 'facile/types/service';
    export * from 'facile/types/filter';
    export * from 'facile/types/model';
    export * from 'facile/types/controller';
}

declare module 'facile/types/service' {
    import { IService, IFacile } from 'facile/interfaces';
    /**
        * Base Service Class
        *
        * @export
        * @class Service
        */
    export class Service implements IService {
            facile: IFacile;
            /**
                * Creates an instance of Service.
                *
                * @param {IFacile} facile
                *
                * @memberOf Service
                */
            constructor(facile: IFacile);
    }
}

declare module 'facile/types/filter' {
    import { IFilter, IFacile } from 'facile/interfaces';
    /**
        * Base Filter Class
        *
        * @export
        * @class Filter
        * @implements {IFilter}
        */
    export class Filter implements IFilter {
            facile: IFacile;
            /**
                * Creates an instance of Filter.
                *
                * @param {IFacile} facile
                *
                * @memberOf Filter
                */
            constructor(facile: IFacile);
    }
}

declare module 'facile/types/model' {
    import { IModel, IFacile } from 'facile/interfaces';
    /**
        * Base Model Class
        *
        * @export
        * @class Model
        */
    export class Model implements IModel {
            facile: IFacile;
            /**
                * Creates an instance of Model.
                *
                * @param {IFacile} facile
                *
                * @memberOf Model
                */
            constructor(facile: IFacile);
    }
}

declare module 'facile/types/controller' {
    import { IController, IFacile } from 'facile/interfaces';
    /**
        * Base Controller Class
        *
        * @export
        * @class Controller
        */
    export class Controller implements IController {
            facile: IFacile;
            /**
                * Creates an instance of Controller.
                *
                * @param {IFacile} facile
                *
                * @memberOf Controller
                */
            constructor(facile: IFacile);
    }
}

